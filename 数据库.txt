1. 说一下 MySQL 数据库存储的原理？
答： 过程是一个可编程的函数，它在数据库中创建并保存。
它可以有 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用
程序或平台上执行相同的函数，或者封装特定功能时，存储过程是非
常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的
模拟。它允许控制数据的访问方式。存储过程通常有以下优点：
1)存储 能实现较快的执行速度。
2)存储过程允许标准组件是编程。
3)存储过程可以用流控制语句编写，有很强的灵活性，可以完成
复杂的判断和较复杂的运算。
4)存储 可被作为一种安全机制来充分利用。
5)存储过程能过减少网络流量。


2. 事务的特性
答：1、原子性( )：事务中的全部操作在数据库中是不
可分割的，要么全部完成，要么均不执行。
2、一致性( )：几个并行执行的事务，其执行结果必
须与按某一顺序串行执行的结果相一致。
3、隔离性( )：事务的执行不受其他事务的干扰，事务
执行的中间结果对其他事务必须是透明的。
4、持久性( )：对于任意已提交事务，系统必须保证该
事务对数据库的改变不被丢失，即使数据库出现故障


3. readis 和 mysql 的区别
readis 是内存数据库，数据保存在内存中，速度快。
mysql 是关系型数据库，持久化存储，存放在磁盘里面，功能强
大。检索的话，会涉及到一定的 IO，数据访问也就慢。


4. redis 受攻击怎么办？
主从
持久化存储
Redis 不以 root 账户启动
设置复杂密码
不允许 key 方式登录


5. MongoDB
MongoDB是一个面向文档的数据库系统。使用C++编写，不支持SQL，但有自己功能强大的查询语法。
MongoDB 使用 BSON 作为数据存储和传输的格式。BSON 是一种类似 JSON 的二进制序列化文档，支持嵌套对象和数组。
MongoDB 很像 MySQL，document 对应 MySQL 的 row，collection对应 MySQL 的 table
应用场景：
1.网站数据：mongo 非常适合实时的插入，更新与查询，并具
备网站实时数据存储所需的复制及高度伸缩性。
2.缓存：由于性能很高，mongo 也适合作为信息基础设施的缓
存层。在系统重启之后，由 mongo 搭建的持久化缓存可以避免下层的
数据源过载。
3.大尺寸、低价值的数据：使用传统的关系数据库存储一些数
据时可能会比较贵，在此之前，很多程序员往往会选择传统的文件进
行存储。
4.高伸缩性的场景：mongo 非常适合由数十或者数百台服务器
组成的数据库。
5.用于对象及 JSON 数据的存储：mongo的BSON 数据格式非常
适合文档格式化的存储及查询。
6.重要数据：mysql，一般数据：mongodb，临时数据：memcache
7.对于关系数据表而言，mongodb 是提供了一个更快速的视图
view；而对于 PHP 程序而言，mongodb 可以作为一个持久化的数组来
使用，并且这个持久化的数组还可以支持排序、条件、限制等功能。
8.将 mongodb 代替 mysql 的部分功能，主要一个思考点就是：
把 mongodb 当作 mysql 的一个 view（视图），view 是将表数据整合
成业务数据的关键。比如说对原始数据进行报表，那么就要先把原始
数据统计后生成 view，在对 view 进行查询和报表。
不适合的场景：
a.高度事物性的系统：例如银行或会计系统。传统的关系型数
据库目前还是更适用于需要大量原子性复杂事务的应用程序。
b.传统的商业智能应用：针对特定问题的 BI 数据库会对产生
高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。
c.需要 SQL 的问题
d.重要数据，关系数据
优点:弱一致性（最终一致），更能保证用户的访问速度
文档结构的存储方式，能够更便捷的获取数
内置 GridFS，高效存储二进制大对象 (比如照片和视频)
支持复制集、主备、互为主备、自动分片等特性
动态查询
全索引支持,扩展到内部对象和内嵌数组
缺点：不支持事务
MongoDB 占用空间过大
维护工具不够成熟


6. Mysql 和 redis 高可用性
MySQL Replication 是 MySQL
Automatic failover：如果一个 master 挂掉后，sentinel 立马
启动故障转移，把某个 slave 提升为 master。其他的 slave 重新配
置指向新 master。
Configuration provider：对于客户端来说 sentinel 通知是有效可
信赖的。客户端会连接 sentinel 去请求当前 master 的地址，一旦发
生故障 sentinel 会提供新地址给客户端。


7. 数据库索引
数据库索引，是数据库管理系统中一个排序的数据结构，以协助
快速查询、更新数据库表中数据。索引的实现通常使用 B_TREE。
B_TREE 索引加速了数据访问，因为存储引擎不会再去扫描整张表得
到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，
存储引擎会根据指针快速寻找数据。


8. 数据库怎么优化查询效率
1.储存引擎选择：如果数据表需要事务处理，应该考虑使用
InnoDB，因为它完全符合 ACID 特性。如果不需要事务处理，使用默
认存储引擎 MyISAM 是比较明智的
2.分表分库，主从，
3.对查询进行优化，要尽量避免全表扫描，首先应考虑在 where
及 order by 涉及的列上建立索引
4.应尽量避免在 where 子句中对字段进行 null 值判断，否则
将导致引擎放弃使用索引而进行全表扫描
5.应尽量避免在 where 子句中使用 != 或 <> 操作符，否则将
引擎放弃使用索引而进行全表扫描
6.应尽量避免在 where 子句中使用 or 来连接条件，如果一个
字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全
表扫描
7.Update 语句，如果只更改 1、2 个字段，不要 Update 全部字
段，否则频繁调用会引起明显的性能消耗，同时带来大量日志
8.对于多张大数据量（这里几百条就算大了）的表 JOIN，要先
分页再 JOIN，否则逻辑读会很高，性能很差。


9. 数据库优化方案
1. 优化索引、SQL 语句、分析慢查询；
2. 设计表的时候严格根据数据库的设计范式来设计数据库；
3. 使用缓存，把经常访问到的数据而且不需要经常变化的数据
放在缓存中，能节约磁盘 IO；
4. 优化硬件；采用 SSD，使用磁盘队列技术(RAID0,RAID1,RDID5)
等；
5. 采用 MySQL 内部自带的表分区技术，把数据分层不同的文件，
能够提高磁盘的读取效率；
6. 垂直分表；把一些不经常读的数据放在一张表里，节约磁盘
I/O；
7. 主从分离读写；采用主从复制把数据库的读操作和写入操作
分离开来；
8. 分库分表分机器（数据量特别大），主要的的原理就是数据
路由；
9. 选择合适的表引擎，参数上的优化；
10. 进行架构级别的缓存，静态化和分布式；
11. 不采用全文索引；
12. 采用更快的存储方式，例如 NoSQL 存储经常访问的数


10. Redis mongodb 优缺点
MongoDB 和 Redis 都是 NoSQL，采用结构型数据存储。二者在使
用场景中，存在一定的区别，这也主要由于二者在内存映射的处理过
程，持久化的处理方法不同。MongoDB 建议集群部署，更多的考虑到
集群方案，Redis 更偏重于进程顺序写入，虽然支持集群，也仅限于
主-从模式.
Redis 优点：
1 读写性能优异
2 支持数据持久化，支持 AOF 和 RDB 两种持久化方式
3 支持主从复制，主机会自动将数据同步到从机，可以进行读写
分离。
4 数据结构丰富：除了支持 string 类型的 value 外还支持
string、hash、set、sortedset、li
负载均衡集群是由一组相互独立的计算机系统构成，通过常规网
络或专用网络进行连接，由路由器衔接在一起，各节点相互协作、共
同负载、均衡压力，对客户端来说，整个群集可以视为一台具有超高
性能的独立服务器。
1、实现原理
实现数据库的负载均衡技术，首先要有一个可以控制连接数据库
的控制端。在这里，它截断了数据库和程序的直接连接，由所有的程
序来访问这个中间层，然后再由中间层来访问数据库。这样，我们就
可以具体控制访问某个数据库了，然后还可以根据数据库的当前负载
采取有效的均衡策略，来调整每次连接到哪个数据库。
2、实现多据库数据同步
对于负载均衡，最重要的就是所有服务器的数据都是实时同步的。
这是一个集群所必需的，因为，如果数不据实时、不同步，那么用户
从一台服务器读出的数据，就有别于从另一台服务器读出的数据，这
是不能允许的。所以必须实现数据库的数据同步。这样，在查询的时
候就可以有多个资源，实现均衡。比较常用的方法是 Moebius for SQL
Server 集群，Moebius for SQL Server 集群采用将核心程序驻留在
每个机器的数据库中的办法，这个核心程序称为 Moebius for SQL
Server 中间件，主要作用是监测数据库内数据的变化并将变化的数
据同步到其他数据库中。数据同步完成后客户端才会得到响应，同步
过程是并发完成的，所以同步到多个数据库和同步到一个数据库的时
间基本相等；另外同步的过程是在事务的环境下完成的，保证了多份
数据在任何时刻数据的一致性。正因为 Moebius 中间件宿主在数据
库中的创新，让中间件不但能知道数据的变化，而且知道引起数据变
化的 SQL 语句，根据 SQL 语句的类型智能的采取不同的数据同步的策
略以保证数据同步成本的最小化。
数据条数很少，数据内容也不大，则直接同步数据
数据条数很少，但是里面包含大数据类型，比如文本，二进制数
据等，则先对数据进行压缩然后再同步，从而减少网络带宽的占用和
传输所用的时间。
数据条数很多，此时中间件会拿到造成数据变化的 SQL 语句，然
后对 SQL 语句进行解析，分析其执行计划和执行成本，并选择是同步
数据还是同步 SQL 语句到其他的数据库中。此种情况应用在对表结构
进行调整或者批量更改数据的时候非常有用。
3、优缺点
优点：
(1) 扩展性强：当系统要更高数据库处理速度时，只要简单地增
加数据库服务器就 可以得到扩展。
(2) 可维护性：当某节点发生故障时，系统会自动检测故障并转
移故障节点的应用，保证数据库的持续工作。
(3) 安全性：因为数据会同步的多台服务器上，可以实现数据集
的冗余，通过多份数据来保证安全性。另外它成功地将数据库放到了
内网之中，更好地保护了数据库的安全性。
(4) 易用性：对应用来说完全透明，集群暴露出来的就是一个IP
缺点：
(1) 不能够按照 Web 服务器的处理能力分配负载。
(2) 负载均衡器(控制端)故障，会导致整个数据库系统瘫痪。


12. Mysql 集群操作步骤
原博客地址
Mysql 群集（Cluster）简介
MySQL 群集需要有一组计算机，每台计算机的角色可能是不一样
的。MySQL 群集中有三种节点：管理节点、数据节点和 SQL 节点。群
集中的某计算机可能是某一种节点，也可能是两种或三种节点的集合。
这三种节点只是在逻辑上的划分，所以它们不一定和物理计算机是一
一对应的关系。
管理节点（也可以称管理服务器）主要负责管理数据节点和 SQL
节点，还有群集配置文件和群集日志文件。它监控其他节点的工作状
态，能够启动、关闭或重启某个节点。其他节点从管理节点检索配置
数据，当数据节点有新事件时就把事件信息发送给管理节点并写入群
集日志。
数据节点用于存储数据。
SQL 节点跟一般的 MySQL 服务器是一样的，我们可以通过它
进行 SQL 操作。
用的 MysqlServer 已经不能满足群集的要求，配置群集需要使用
MySQLCluster。
MySQLCluster 的配置
首先找三台电脑，或者是开三个虚拟机，管理节点部署在一
台机子上，其他两台每台都部署一个数据节点和一个 SQL 节点。这里
以两台机子举例，其中一台机器 A（IP 为 192.168.193.90）部署管
理节点、数据节点和 SQL 节点，另一台机器 B（IP 为 192.168.193.50）
部署数据节点和 SQL 节点。
其实最好不要将管理节点跟数据节点部署到一台机子上，
因为如果数据节点宕机会导致管理节点也不可用，整个 MySQL 群集就
都不可用了。所以一个 MySQL 群集理想情况下至少有三台服务器，将
管理节点单独放到一台服务器上。暂以两台举例，只是为了说明三种
节点的配置启动方法。
将上面下载的安装包解压，并改文件夹名为 mysql，因为需要多
次在命令行中操作，所以名字改短后更容易输入。
配置管理节点，配置数据节点，配置 SQL 节点
启动管理节点，启动数据节点，启动 SQL 节点
测试 MySQLCluster：我们需要测试三种情况：
1.在任一 SQL 节点对数据节点进行操作后，各数据节点是否能够
实现数据同步。例如，我们在机器 A 上新创建一个数据库 myDB，然
后再建一个表 student（新建表如下命令：createtable student (id
int(2)) engine=ndbcluster），插入若干数据，接着我们到机器 B
上查看是否能看到新的数据库myDB和新的表student以及插入数据。
2.当关闭任一数据节点后，在所有 SQL 节点中进行操作是否不
受其影响。例如，我们关闭机器 A 上的数据节点服务，在两台主机上
应该能够继续对数据库进行各种操作。
3.关闭某数据节点进行了数据库操作，然后重新启动，所有 SQL
节点的操作是否正常。


13. 怎样解决海量数据的存储和访问造成系统设计瓶颈的问题？
水平切分数据库：可以降低单台机器的负载，同时最大限度的降
低了宕机造成的损失；分库降低了单点机器的负载；分表，提高了数
据操作的效率，
负载均衡策略：可以降低单台机器的访问负载，降低宕机的可能
性；
集群方案：解决了数据库宕机带来的单点数据库不能访问的问题；
读写分离策略：最大限度了提高了应用中读取数据的速度和并发
量；


14. MySQL 集群的优缺点
优点：
a) 99.999%的高可用性
b)快速的自动失效切换
c)灵活的分布式体系结构，没有单点故障
d)高吞吐量和低延迟
e)可扩展性强，支持在线扩容
缺点：
a)存在很多限制，比如：不支持外键
b)部署、管理、配置很复杂
c)占用磁盘空间大，内存大
d)备份和恢复不方便
e)重启的时候，数据节点将数据 load 到内存需要很长时间


15. 你用的 mysql 是哪个引擎，各引擎间有什么区别
主要 MyISAM 与 InnoDB 两个引擎，其主要区别如下：
一、InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。
事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还
原，而 MyISAM就不可以了；
二、MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修
改以及涉及到安全性较高的应用；
三、InnoDB 支持外键，MyISAM 不支持；
四、MyISAM 是默认引擎，InnoDB 需要指定；
五、InnoDB 不支持 FULLTEXT 类型的索引；
六、InnoDB 中不保存表的行数，如 select count(*) from table
时，InnoDB；需要扫描一遍整个表来计算有多少行，但是 MyISAM 只要简单的读出
保存好的行数即可。注意的是，当 count(*)语句包含 where 条件时 MyISAM 也
需要扫描整个表；
七、对于自增长的字段，InnoDB 中必须包含只有该字段的索引，
但是在 MyISAM表中可以和其他字段一起建立联合索引；
八、清空整个表时，InnoDB 是一行一行的删除，效率非常慢。
MyISAM 则会重建表；
九、InnoDB 支持行锁（某些情况下还是锁整表，如 update table
set a=1 where
user like '%lee%'



16. redis 基本类型、相关方法
答：Redis 支持五种数据类型：string（字符串）、hash（哈希）、
list（列表）、set（集合）及 zset(sorted set：有序集合)。
一、String
String 是 Redis 最为常用的一种数据类型，String 的数据结构
为 key/value 类型，String 可以包含任何数据。
常用命令: set,get,decr,incr,mget 等
二、Hash
Hash 类型可以看成是一个 key/value 都是 String 的 Map 容器。
常用命令：hget,hset,hgetall 等。
三、List
List 用于存储一个有序的字符串列表，常用的操作是向队列两
端添加元素或者获得列表的某一片段。
常用命令：lpush,rpush,lpop,rpop,lrange 等
四、Set
Set 可以理解为一组无序的字符集合，Set 中相同的元素是不会
重复出现的，相同的元素只保留一个。
常用命令：sadd,spop,smembers,sunion 等
五、Sorted Set（有序集合）
有序集合是在集合的基础上为每一个元素关联一个分数，Redis
通过分数为集合中的成员进行排序。
常用命令：zadd,zrange,zrem,zcard 等


17. redis 的事务？
Redis 事务允许一组命令在单一步骤中执行。事务有两个属性，
说明如下：
事务是一个单独的隔离操作：事务中的所有命令都会序列化、按
顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令
请求所打断。
Redis 事务是原子的。原子意味着要么所有的命令都执行，要么
都不执行；
一个事务从开始到执行会经历以下三个阶段：
开始事务
命令入队
执行事务



18. redis 的使用场景有哪些？
1.取最新 N 个数据的操作
2.排行榜应用,取 TOP N 操作
3.需要精准设定过期时间的应用
4.计数器应用
5.uniq 操作,获取某段时间所有数据排重值
6.Pub/Sub 构建实时消息系统
7.构建队列系统
8.缓存



19. 怎样结局数据库高并发的问题？
解决数据库高并发：
分表分库
数据库索引
redis 缓存数据库
读写分离
负载均衡集群：将大量的并发请求分担到多个处理节点。由于单
个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可
用性。


20. redis 默认端口，默认过期时间，Value 最多可以容纳的数据
长度？
默认端口：6379
默认过期时间：可以说永不过期，一般情况下，当配置中开启
了超出最大内存限制就写磁盘的话，那么没有设置过期时间的 key
可能会被写到磁盘上。假如没设置，那么 REDIS 将使用 LRU 机制，将
内存中的老数据删除，并写入新数据。
Value 最多可以容纳的数据长度是：512M。
21. sqlserver，MySQL ，Oracle http，redis，https 默认端口号？
sqlserver：1433
MySQL：3306
Oracle ：1521
http：80
https：443
redis：6379
22. redis 缓存命中率计算？
Redis 提供了 INFO 这个命令，能够随时监控服务器的状态，只
用 telnet 到对应服务器的端口，执行命令即可：
telnet localhost 6379
info
在输出的信息里面有这几项和缓存的状态比较有关系：
keyspace_hits:14414110
keyspace_misses:3228654
used_memory:433264648
expired_keys:1333536
evicted_keys:1547380
通过计算 hits 和 miss，我们可以得到缓存的命中率：14414110
/ (14414110 + 3228654) = 81% ，一个缓存失效机制，和过期时间
设计良好的系统，命中率可以做到 95%以上
23. redis 有多少个库？
Redis 一个实例下有 16 个库