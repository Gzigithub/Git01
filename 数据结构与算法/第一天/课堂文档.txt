课程简介：	四章 共计16个小节
	
	第 1 章 基础
		1.1 为什么学？	
		1.2 简介	
	第 2 章 快速入门	
		2.1 入门案例
		2.2 算法复杂度
		2.3 性能分析模型详解	
	第 3 章 数据结构 进阶
		3.1 线性表	
		3.2 顺序表
		3.3 单向链表
		3.4 双向链表
		3.5 单向循环链表
		3.6 栈	
		3.7 队列
		3.8 树
	第 4 章 算法 进阶
		4.1 排序
		4.2 搜索
		4.3 二叉树

	第一天：1.1-3.2
	第二天：3.3-3.5
	第三天：3.6-4.1
	第四天：4.1-4.3
		
		
第 1 章 基础	
	1.1 为什么学？

			
	1.2 简介	
		什么是数据结构
			存储、组织数据的方式
			数据的结构有两种形式：
				物理形式：顺序表、链表
				逻辑形式：集合、线性、树形、图形
		算法是什么？
			方法和思路
			算法复杂度：
				时间复杂度：代码执行的时间
				空间复杂度：代码运行的空间
		数据结构 VS 算法
			数据结构 + 算法 = 程序
			
		抽象数据类型:
			数据 + 动作
第 2 章 快速入门
	2.1 入门案例	
		2.1.1 解决方法一
			全猜：
				# 注意是三重循环
				for a in range(1001):
					for b in range(1001):
						for c in range(1001):
							if 1000 == a + b + c and a**2 + b**2 == c**2:
								print("a,b,c: %d,%d,%d" % (a,b,c))
								
			算法特点：
				量入出题题能解，行有意步步可为
				
				
		2.1.2 解决方法二
			# 解决方法一：2猜1算
				for a in range(1001):
					for b in range(1001):
						c = 1000 - a - b
						if a**2 + b**2 == c**2:
							print("a,b,c: %d,%d,%d" % (a,b,c))
		2.1.3 方法思考	
			评判一个算法：
				步骤数量+单位时间
		2.1.4 步骤数量	
	2.2 算法复杂度	
		2.2.1 时间复杂度
			什么是时间复杂度？
				做一件事情需要花费多少时间
				大O记法、规律趋势
				渐近时间复杂度
				
				
		2.2.2 时间复杂度分类
			最优
			最坏	---    关注点
			平均
		2.2.3 基本计算规则	
		时间复杂度6规则：
			1、基本操作：常数项 -- 一步到位
				O(1)
			2、顺序结构：	一步一步。。。
				O(n)
			3、循环结构：
				嵌套：O(n3)
				递归：O(logn)
			4、分支：最坏时间复杂度
			5、抓住干：最高次项
			6、最坏时间复杂度
				
		2.2.4 空间复杂度	
			目的：
				空间换时间
				
		2.2.5 算法复杂度实践
		2.2.6 常见时间复杂度
			O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)
			关键点；
				数字最小，n越多，值越大
				时间复杂度越小，效率越高，时间越短
	2.3 性能分析模型详解
		2.3.1 timeit模块简介
			两句代码：
				timer1 = timeit.Timer("T1()","from __main__ import T1")
				timer1.timeit(1000)
					注意：返回的是平均耗时
					
					
					
					
		2.3.2 列表性能测试实践
		import timeit
		# 内置属性
		def T1():
			li = []
			for i in range(1000):
				li.append(i)

		# 列表拼接
		def T2():
			li = []
			for i in range(1000):
				li = li + [i]

		# 列表推导式
		def T3():
			li = [i for i in range(1000)]

		# 属性转换
		def T4():
			li = list(range(1000))


		if __name__ == '__main__':
			timer1 = timeit.Timer("T1()", "from __main__ import T1")
			cost1 = timer1.timeit(1000)
			print("内置属性: %f" % (cost1))

			timer2 = timeit.Timer("T2()", "from __main__ import T2")
			cost2 = timer2.timeit(1000)
			print("列表拼接: %f" % (cost2))

			timer3 = timeit.Timer("T3()", "from __main__ import T3")
			cost3 = timer3.timeit(1000)
			print("列表推导: %f" % (cost3))

			timer4 = timeit.Timer("T4()", "from __main__ import T4")
			cost4 = timer4.timeit(1000)
			print("属性转换: %f" % (cost4))
			
第 3 章 数据结构 进阶
	3.1 线性表
		3.1.1 线性表简介
			什么是线性表？
				将一大堆同类型的数据，按照某种关系，依次排列出来，就形成了一条线
				特点：数据之间，只有前后关系
				最基础+最广
				
			线性表分类：
				顺序表：
					连续的存储区
				链表：
					链接
					链表有如下分类：
						单向链表、双向链表、单向循环链表
				
	3.2 顺序表
		3.2.1 顺序表形式
		顺序表两种形式：
			基本布局：同类		连续
			元素外置：异类		跳转
		3.2.2 顺序表结构
			顺序表结构：
				基本信息：存储空间大小+元素数量
				存储区域
				一旦定义好顺序表，对象就固定了
			一体式：
				存储表信息与元素存储区以连续的方式安排在一块存储区里，形成一个完整的顺序表对象。
				特点：方便管理
			分离式：
				顺序表对象里保存基本信息(地址容量+元素个数)和元素存储空间的一个逻辑地址(A)，通过逻辑地址(A)找到真正的数据存储地址
				特点：灵活
				
		3.2.3 顺序表实践
			内容更改:
				一体式：空间浪费
				分离式：灵活，空间利用率高
				
			内容扩充：
				线性增长：
					好的：空间利用率高，
					确定：操作频繁
				倍数增长：
					好的：操作不频繁，节省时间
					坏到：空间利用率不高(哥不在乎)
					
		3.2.4 顺序表常见操作
			顺序表的“增”操作：
				插头：	保序，O(n)
				插尾： 	保序，O(1)
				乱插： 	非保序，O(1)
				
			“删”操作：
				减头：	保序，O(n)
				减尾： 	保序，O(1)
				乱减： 	非保序，O(1)
	3.3 单向链表	
		3.3.1 单向链表简介	
			单向链表是什么
				最简单
				基本单位叫“结点
					元素存储区域(item)+下一元素地址(next)
					
			链表基本术语：
				结点、头结点、尾结点、前驱结点、后继结点
			
			单向链表特点：
				只要找到头结点，那么整个链表就能找全
				尾结点中的“下一地址”内容为空(None)
				保存单向链表，只需要保存头结点地址即可
			
			为什么用链表：
				链表灵活，空间利用率高
					
		3.3.2 python 链表解析
		3.3.3 实践 之 基本属性
				class BaseNode(object):
					def __init__(self,item):
						self.item = item
						self.next = None	
				关键点：
					对象属性，用构造方法来实现
					
				
					
		3.3.4 实践 之 操作分析
			class SingleLinkList(object):
				def __init__(self,node=None):
					self.__head = node		

				信息查看类：
					链表是否为空：is_empty()	
					链表元素数量：length()
					链表内容查看：travel()
					链表内容搜索: search(item)

				内容增加类：
					插头增:	add(item)
					插尾增: append(item)
					指定位置增: insert(pos,item)

				内容删除类：
					内容删除: remove(item)			
		3.3.5 实践 之 查看	
		
			判空：
				# 判读链表是否为空
				def is_empty(self):
					return  self.__head is None
				关键点：
					链表自动获取头结点
					
			数量：
				# 获取链表的长度
				def length(self):
					cur = self.__head
					count = 0
					# 遍历所有节点
					while cur is not None:
						count += 1
						cur = cur.next
					# 返回计数器的值
					return count	
				关键点：
					1、计数器+变量
					2、循环退出条件：while cur is not None:
					
			查看所有内容：
				# 获取链表的所有内容
				def travel(self):
					cur = self.__head
					# 遍历所有节点
					while cur is not None:
						print(cur.item,end=" ")
						cur = cur.next
					# 返回计数器的值
					print("")
				关键点：
					1、遍历：while cur is not None:
					2、内容打印：print(cur.item,end=" ")
					3、打印格式：print("")
					
			搜索：
				# 获取链表的所有内容
				def search(self,item):
					cur = self.__head
					# 遍历所有节点
					while cur is not None:
						if cur.item == item:
							return item
						cur = cur.next
					return False	
				关键点：
					1、遍历：while cur is not None:
					2、内容匹配：if cur.item == item:
					3、错误返回：return False
		
		3.3.6 实践 之 增加	
		3.3.7 实践 之 删除	
		3.3.8 链表 VS 顺序表
	3.4 双向链表	
		3.4.1 双向链表简介	
		3.4.2 实践 之 基本属性
		3.4.3 实践 之 操作分析
		3.4.4 实践 之 增加	
		3.4.5 实践 之 删除	
	3.5 单向循环链表	
		3.5.1 单向循环链表简介
		3.5.2 实践 之 基本属性
		3.5.3 实践 之 操作分析
		3.5.4 实践 之 查看
		3.5.5 实践 之 增加
		3.5.6 实践 之 删除
	3.6  栈(简单)	
		3.6.1 栈的简介	
		3.6.2 栈的实践	
	3.7 队列(简单)	
		3.7.1 队列简介	
		3.7.2 队列的实践	
		3.7.3 双端队列(了解)
	3.8 树	
		3.8.1 树简介
		3.8.2 二叉树简介
		3.8.3 二叉树实践
第 4 章 算法 进阶
	4.1 排序
		4.1.1 排序算法简介
		4.1.2 冒泡排序
		4.1.3 选择排序
		4.1.4 插入排序
		4.1.5 希尔排序
		4.1.6 快速排序
		4.1.7 归并排序
		4.1.8 堆排序	
		4.1.9 排序总结
	4.2 搜索	
		4.2.1 搜索简介
		4.2.2 二分查找
		4.2.3 递归二分实践	
		4.2.4 普通二分实践	
	4.3 二叉树
		4.3.1 二叉树遍历	
		4.3.2 查询实践(广度优先)
		4.3.3 查询实践(深度优先)
		4.3.4 二叉树反推(拓展)	