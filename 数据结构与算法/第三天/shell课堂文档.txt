1、课程简介
	课程共计两阶段八部分。
	
	第一阶段：shell编程
		1.1 shell快速入门
			运维(了解)、shell简介
		1.2 shell基础
			shell脚本、三种变量
		1.3 shell进阶
			测试语句、表达式、linux常见符号、linux常用命令
		1.4 shell流程控制语句
			简单流程控制、复杂流程控制
	
	第二阶段：代码发布
		2.1 代码部署
			部署定义、方式、流程
		2.2 服务器环境部署
		2.3 手工方式部署代码
		2.4 脚本方式部署代码
		
	时间安排：
		第一天： 1.1-1.3 
		第二天： 1.4-2.2
		第三天： 2.4

		
第 1 章 SHELL 快速入门
	1.1 运维
	1.2 shell简介	
		1.2.1 什么是shell
			shell的定义
				命令解释器
			shell分两大类：
				图形界面shell和命令行shell(bash)
			查看系统shell信息
				echo $SHELL
				cat /etc/shells
						
		1.2.2 shell的分类	
		1.2.3 shell 脚本	
第 2 章 SHELL 基础知识	
	2.1 shell脚本	
		2.1.1 创建脚本	
			vi/vim
			注释内容：
				单行注释：
					# /etc/shells: valid login shells	
				多行注释
					多行注释有两种方法：:<<! ... !  和 :<<字符 ... 字符
			
		2.1.2 脚本执行
			shell执行的方式
				1、/bin/bash /path/to/script-name	（强烈推荐使用）
					脚本文件本身没有可执行权限或者脚本首行没有命令解释器时使用的方法，我们推荐用bash执行。
					使用频率：☆☆☆☆☆
				2、./script-name
					脚本文件具有可执行权限时使用。
					使用频率：☆☆☆☆
				3、source script-name
					使用source或者.点号，加载shell脚本文件内容，使shell脚本内容环境和当前用户环境一致。
					使用频率：☆☆☆
					使用场景：环境一致性
				
		2.1.2 脚本开发规范	
			脚本开发规范
				1、脚本命名要有意义，文件后缀是.sh
				2、脚本文件首行是而且必须是脚本解释器
				#!/bin/bash
				3、脚本文件解释器后面要有脚本的基本信息等内容
				脚本文件中尽量不用中文注释;
						尽量用英文注释，防止本机或切换系统环境后中文乱码的困扰
				常见的注释信息：脚本名称、脚本功能描述、脚本版本、脚本作者、联系方式等
				4、脚本文件常见执行方式：bash 脚本名
				5、脚本内容执行：从上到下，依次执行
				6、代码书写优秀习惯;
					1）成对内容的一次性写出来,防止遗漏。
				如：()、{}、[]、''、``、""
					2）[]中括号两端要有空格,书写时即可留出空格[    ],然后再退格书写内容。
					3）流程控制语句一次性书写完，再添加内容
				7、通过缩进让代码易读;(即该有空格的地方就要有空格)
				
				
		拓展；
			你们的项目在哪里开发呀？
				考点：项目的五个环境
					个人开发环境：
						特点；环境完全不一致
						工作内容：项目子模块的开发
					公司开发环境：
						特点：和线上服务器环境完全一致
						工作内容：联调
					测试环境：
						特点：和线上服务器环境完全一致
						工作内容：确认项目功能
					预发布环境：
						特点：和线上服务器环境完全一致
						工作内容：特殊测试
					线上环境：
						特点：标准环境
						工作内容：代码运行
						
				团队：
					团队人员+技术水平
					
				人员：
					6左右
					
				分工：
					1ui  5后端
					1前端 +5后端
					1产品+1前端+4后端
					
				upstream
					
	2.2 变量	
		2.2.1 什么是变量
			变量是什么？
				变量包括两部分：
					变量名		不变的
					变量值		变化的
			我们一般所说的变量指的是：变量名
			
			
		2.2.2 本地变量	
			定义：在当前系统的某个环境下才能生效的变量，作用范围小
			普通变量示例：
				1、变量名=变量值
					特点：变量值必须是一个整体，中间没有特殊字符	
				2、变量名='变量值'
					特点：原文输出
				3、变量名="变量值"
					特点：先解析再输出
				示例：
					echo $itcast
					itcast=nihao666
					echo $itcast
					itcast=nihao777
					echo $itcast
					itcast='nihao888'
					echo $itcast
					itcast="nihao999"
					echo $itcast
					itcast1=nihao 666
					echo $itcast1
					itcast1='nihao 777'
					echo $itcast1
					itcast1="nihao 888"
					echo $itcast1
					echo $itcast
					itcast2='dan-$itcast'
					echo $itcast2
					itcast2="dan-$itcast"
					echo $itcast2			
			
			命令变量
				1、	变量名=`命令`
				2、 变量名=$(命令)		生产中推荐使用
				示例：
				dir=`pwd`
				echo $dir
				dir1=$(pwd)
				echo $dir1				
				
				
		2.2.3 全局变量	
			定义：在当前系统的所有环境下都能生效的变量。
			查看方式：
				env
			两种定义格式：
				方法一：
					变量=值
					export 变量
				方法二：（最常用）
					export 变量=值
			示例：
				env | grep SHELL
				SHENGWEISHUJI=gengfeng
				echo $SHENGWEISHUJI
				env | grep SHENG
				export SHENGWEISHUJI
				env | grep SHENG
				export SHENGZHANG=chenqiang
				env | grep SHENG
				
				
		2.2.4 变量查看和取消
			查看变量4方式：
				1、$变量名
				2、"$变量名"
				3、${变量名}
				4、"${变量名}"		*****
				示例：
					echo $SHENGWEISHUJI
					echo "$SHENGWEISHUJI"
					echo ${SHENGWEISHUJI}
					echo "${SHENGWEISHUJI}"				
				
			取消变量
				unset 变量名
				示例：
					unset itcast
					echo $itcast
					echo $itcast1
					unset itcast1
					unset itcast2
					echo $itcast1
				
		2.2.5 shell内置变量	
			和脚本文件有关
				$0	脚本文件名
				$n	第n个参数值			
				$#	参数的总个数
				$?	上一个指令的返回值
				脚本示例；
					#!/bin/bash
					# 获取位置参数内容
					echo "第 1 个位置的参数内容是: $1"
					echo "第 2 个位置的参数内容是: $2"
					echo "第 3 个位置的参数内容是: $3"
					echo "第 4 个位置的参数内容是: $4"
					
					#!/bin/bash
					# 获取当前脚本的文件名
					echo "当前脚本文件名: get_name.sh"
					echo "当前脚本文件名: $0"
					
					#!/bin/bash
					# 获取脚本传参中数量
					echo "当前脚本传入的参数总个数为: $#"
				
		字符串精确截取
			格式：${变量名:起始位置:截取长度}	
			示例：
				file=dsakjflkdsjfalkdsjlkfjdsalfjdsl
				echo $file
				echo ${file:0:8}
				echo ${file:5:8}
				echo ${file:0-15:8}	
				
		默认值相关：
			1、条件默认：${变量名:-默认值}
			2、强制默认：${变量名+默认值}
			示例：
			#!/bin/bash
			# 有条件的默认
			a="$1"
			echo "您选择的套餐是 : ${a:-1} 套餐"

			#!/bin/bash
			# 强制默认
			a="$1"
			echo "国家法定结婚年龄(男性)是: ${a+22} 岁"			
				
第 3 章 SHELL 进阶	
	3.1 表达式	
		3.1.1 测试语句	
			测试语句形式
				A: test 条件表达式
				B: [ 条件表达式 ]  *****
					条件成立，状态返回值是0
					条件不成立，状态返回值是1
		3.1.2 条件表达式	
			逻辑表达式：
				&&
					齐头并进
				||
					对着干
				示例：
				[ 1 = 1 ] && echo "ok"
				[ 1 = 3 ] && echo "ok"
				[ 1 = 3 ] || echo "nook"
				[ 1 = 1 ] || echo "nook"
			文件表达式	
				-f		判断输入内容是否是一个文件
				-d		判断输入内容是否是一个目录
				-x		判断输入内容是否可执行
				示例：
					[ -f get_num.sh ]
					echo $?
					[ -f get_num.sh-1 ]
					echo $?
					[ -f get_num.sh-1 ] || touche nihao.txt
					[ -f get_num.sh-1 ] || touch nihao.txt
					ls
					[ -d Desktop]
					[ -d Desktop ]
					echo $?
					[ -d scripts ]
					echo $?
					[ -d scripts ] || mkdir scripts
					ls
					mv *.sh scripts/
					ls
					mv nihao.txt scripts/
					ls
					cd scripts/
					ls
					[ -x linshi.sh ]
					echo $?
					[ -x zhusi.sh ]
					echo $?
					[ -x zhusi.sh ] || chmod +x zhusi.sh 
					
			数值操作符
				n1 -eq n2            相等
				n1 -gt n2            大于
				n1 -lt n2            小于
				n1 -ne n2            不等于				
				示例：
				 2060  [ 1 -eq 1 ]
				 2061  echo $?
				 2062  [ 1 -gt 1 ]
				 2063  echo $?
				 2064  [ 1 -lt 1 ]
				 2065  echo $?
				 2066  [ 1 -ne 1 ]
				 2067  echo $?	

			字符串比较
				str1 == str2			str1和str2字符串内容一致
				str1 != str2			str1和str2字符串内容不一致，!表示相反的意思
				示例：
					[ abc == abcd ]
					echo $?
					[ abc != abcd ]
					echo $?
					a=abc
					b=dsaf
					echo $a
					echo $b
					[ $a == $b ]
					echo $?
					
		3.1.3 计算表达式
			计算表达式
				$(())
				let
				格式：
					a=$((变量名a+1))
					let	变量名a=变量名a+1
						特点：表达式必须是一个整体，中间不能出现空格等特殊字符
				示例：
					echo $((1+1))
					a=$((3+3))
					echo $a
					a=$((a+1))
					echo $a
					a==4
					a=4
					let a=a+9
					echo $a
					a=$(( a +   1 ))
					echo $a
				
				
				
	3.2 linux常见符号	
		3.2.1 重定向符号
			重定向符号 >  和 >>
				> 表示将符号左侧的内容，以覆盖的方式输入到右侧文件中
				>> 表示将符号左侧的内容，以追加的方式输入到右侧文件的末尾行中
				示例：
					cat nihao.txt 
					echo 'nibuhao' > nihao.txt 
					cat nihao.txt 
					echo 'nihaohuai' > nihao.txt 
					cat nihao.txt 
					echo 'fengge' >> nihao.txt 
					cat nihao.txt 
					echo 'huanying qianggou' >> nihao.txt 
					cat nihao.txt 
				
		3.2.2 管道符 |
			管道符左侧命令1 执行后的结果，传递给管道符右侧的命令2使用
				env | grep SHELL
		3.2.3 其他符号
			后台展示符号 &
				& 就是将一个命令从前台转到后台执行
				sleep 10
				sleep &
				sleep 10 &
				ps aux | grep sleep
				
			全部信息符号 2>&1 
				符号详解：
				1 表示正确输出的信息
				2 表示错误输出的信息
				2>&1 代表所有输出的信息	
					ls 1>> zhengque
					cat zhengque 
					dsafds 2>> cuowu
					cat cuowu 
					vim ceshi.sh
					cat c
					cat ceshi.sh 
					/bin/bash ceshi.sh 
					/bin/bash ceshi.sh 1>> ceshi-ok 2>> ceshi-nook
					cat ceshi-ok 
					cat ceshi-nook 
					/bin/bash ceshi.sh 1>> ceshi-all 2>> ceshi-all
					cat ceshi-all 
					/bin/bash ceshi.sh >> ceshi-all1 2>&1
					cat ceshi-all1
					/bin/bash ceshi.sh 2>&1  >> ceshi-all2
					cat ceshi-all2
					/bin/bash ceshi.sh >> /dev/null 2>&1
					
				拓展：
					 >> /dev/null 2>&1
					 注意格式，文件在前， 信息在后
					 
			设备文件
				/dev/null
					
					
	3.3 常见命令详解	
		3.3.1 grep命令详解	
			格式：
				grep [参数] [关键字] <文件名>
				参数详解
				-c：只输出匹配行的计数。
				-n：显示匹配行及行号。
				-v：显示不包含匹配文本的所有行。
				示例：
				vim grep.txt
				cat grep.txt 
				grep aaa grep.txt 
				grep -c aaa grep.txt 
				grep -c nihao grep.txt 
				grep -n nihao grep.txt 
				grep -v nihao grep.txt 
				ls
				cd
				ls
				grep -nr "aaa" ./*
				grep -nr "default" /		
				
		3.3.2 sed命令详解	
			格式：sed [参数] '<匹配条件> [动作]' [文件名]
			示例：
				替换格式：'s###'  --->  's#原内容##' ---> 's#原内容#替换后内容#'
				替换的格式：
					sed -i '行号s#原内容#替换后内容#列号' [文件名]
					sed -i 's#原内容#替换后内容#g' [文件名]
					
				示例：
					cat sed.txt 
					sed 's#sed#SED#' sed.txt 
					cat sed.txt 
					sed -i '2s#sed#SED#2' sed.txt 
					cat sed.txt 
					sed -i 's#sed#SED#2' sed.txt 
					cat sed.txt 
					sed -i '2s#sed#SED#' sed.txt 
					cat sed.txt 
					sed -i 's#SED#sed#g' sed.txt 
					cat sed.txt				
					
			在指定行号的下一行增加内容
				格式：sed -i '行号a\增加的内容' 文件名
				示例：
					cat sed.txt 
					cat -n sed.txt 
					sed -i '1a\add-1' sed.txt 
					cat -n sed.txt 
					sed -i '1,3a\add-3' sed.txt 
					cat -n sed.txt
					
			在指定行号的当行增加内容
				格式：sed -i '行号i\增加的内容' 文件名
				示例；
					cat -n sed.txt 
					sed -i '1i\insert-1' sed.txt 
					cat -n sed.txt 
					sed -i '2,5i\insert-3' sed.txt 
					cat sed.txt 
					cat -n sed.txt	

			指定行号删除
				格式：sed -i '行号d' 文件名
				示例：
					cat -n sed.txt 
					sed -i '1d' sed.txt 
					cat -n sed.txt 
					sed -i '3d' sed.txt 
					cat -n sed.txt 
					sed -i '3,9d' sed.txt 
					cat -n sed.txt 				
				
		3.3.3 awk命令详解	
			格式：awk [参数] '[ 动作]' [文件名]
			基本示例：
				awk '{print $0}' awk.txt 
				awk '{print $1}' awk.txt 
				awk '{print $3}' awk.txt 
				awk '{print $1,$3}' awk.txt 
				awk '{print $4,$2}' awk.txt 
				awk '{print NR,$4,$2}' awk.txt 
				awk 'NR==1 {print NR,$4,$2}' awk.txt 

			指定隔离分隔符，查看内容
				 格式：awk -F '列分隔符' '动作' 文件名
				 示例：
					cat awk1.txt 
					awk 'NR==1 {print NR,$4,$2}' awk.txt 
					awk 'NR==1 {print NR,$4,$2}' awk1.txt 
					awk 'NR==1 {print NR,$1}' awk1.txt 
					awk -F ':' 'NR==1 {print NR,$1}' awk1.txt 
					awk -F ':' '{print NR,$1}' awk1.txt 
					awk -F ':' '{print NR,$1,$4}' awk1.txt 

			设置显示分隔符，显示内容
				格式：awk 'BEGIN{OFS="列分隔符"} {动作}' 文件名
				示例：
					awk -F ':' '{print NR,$1,$4}' awk1.txt 
					awk -F ':' 'BEGIN{OFS="~~"}  {print NR,$1,$4}' awk1.txt 
					awk -F ':' 'BEGIN{OFS="@"}  {print NR,$1,$4}' awk1.txt				

					
		3.3.4 find命令详解	
			格式：
				find [路径] [参数] [关键字]
			示例；
				find / -name "sed.txt"
				find / -name "sed*"
				find /root -type f
				ll /root/.mozilla/firefox/w4ameoja.default/kinto.sqlite
				find /root -type d
				ll /root/.mozilla/firefox/w4ameoja.default/bookmarkbackups
				find /root -type d -name "fire*"
				
第4章 流程控制	19
	4.1 简单流程控制语句
		4.1.1 单分支if语句
			语法格式
				if [ 条件 ]
				then
					指令
				fi
			示例：
				#!/bin/bash
				# 单分支if语句
				if [ "$1" == "nan" ]
				then
				  echo "您的性别是男"
				fi
			
		4.1.2 双分支if语句	
			语法格式
				if [ 条件 ]
				then
					指令1
				else
					指令2
				fi
			示例：
				#!/bin/bash
				# 双if语句
				if [ "$1" == "nan" ]
				then
				  echo "您的性别是男"
				else
				  echo "您的性别是女"
				fi
				
		4.1.3 多分支if语句	
			语法格式
				if [ 条件 ]
				then
					指令1
				elif [ 条件2 ]
				then
					指令2
				else
					指令3
				fi
			示例：
				#!/bin/bash
				# 多if语句
				if [ "$1" == "nan" ]
				then
				  echo "您的性别是男"
				elif [ "$1" == "nv" ]
				then
				  echo "您的性别是女"
				else
				  echo "请问峰哥!!"
				fi
			
			
		4.1.4 case选择语句	
			语句格式
				case 变量名 in
				   值1)
					  指令1
						 ;;
				   值2)
					  指令2
						 ;;
				   值3)
					  指令3
						 ;;
				esac
				注意：
				首行关键字是case，末行关键字esac
				选择项后面都有 )
				每个选择的执行语句结尾都有两个分号;
			示例：
				#!/bin/bash
				# case语句示例
				case "$1" in
				  "start")
					echo "服务启动中..."
					;;
				   "stop")
					echo "服务关闭中..."
					;;
				  "restart")
					echo "服务重启中..."
					;;
				  *)
					echo "脚本 $0 的使用方式是: /bin/bash $0 [start|stop|restart]"
					;;
				esac			
		4.1.5 for循环语句
			语法格式
				语法格式
				for 值 in 列表
				do
				   执行语句
				done
			示例：
				#!/bin/bash
				# for语句示例
				for i in $(ls /root/scripts)
				do
				  echo "/root/scripts/ 目录下的文件有 ${i}"
				done		
			场景：
				遍历列表
				
		4.1.6 while循环语句	
			语法格式
				while 条件
				do
				   执行语句
				done
			示例：
				#!/bin/bash
				# while 语句示例
				a=1
				while [ "${a}" -lt 5 ] 
				do
				  echo "${a}"
				  a=$((a+1))
				done
			场景：
				守护进程，条件满足才循环
		4.1.7 until循环语句		
			语法格式
				until 条件
				do
				   执行语句
				done
			示例：
				#!/bin/bash
				# until语句示例
				a=1
				until [ "${a}" -eq 5 ]
				do
				  echo "${a}"
				  let a=a+1
				done
			场景：
				守护进程，条件不满足才循环				
	4.2 复杂流程控制语句
		4.2.1 函数基础知识	
			简单函数格式：
				定义函数：
					函数名(){
						函数体
					}
				调用函数：
					函数名
				示例：
					#!/bin/bash
					# 简单函数定义和调用
					dayin(){
					  echo "nihao geng gege"
					}

					dayin	
						
						
			传参函数格式：
				传参数
					函数名 参数 
				函数体调用参数：
					函数名(){
						函数体 $n
					}
				示例：
					#!/bin/bash
					# 传参函数定义和调用
					dayin(){
					  echo "nihao $1 gege"
					}

					dayin geng
					
			脚本传参，函数调用
				#!/bin/bash
				# 脚本传参，函数调用
				dayin(){
				  echo "nihao $1 gege"
				}

				dayin $1
				关键点：
					两个位置参数的作用对象是不一样的。
				
		4.2.2 函数实践
	4.3 第一阶段综合案例
第 5 章 代码发布	
	5.1 代码发布简介	
		5.1.1 代码发布介绍
			代码发布：
				将我们的代码放到一台公司的互联网服务器上
			
		5.1.2 发布方式	
			手工+脚本
	5.2 代码发布流程	
		5.2.1 流程简介	
			获取 -- 打包 -- 传输 -- 关闭 -- 解压 -- 放置 -- 开启 -- 自检 --对外
			
		5.2.2 流程详解
			获取代码:
				权限
			打包代码：
				tar
			传输代码：
				scp
			关闭应用：
				先关闭离客户近的，后关闭离客户远的
			解压代码：
				tar
			放置代码：
				备份原文件 + 放置新文件
				注意：
					两个文件的名称是一样的，只是内容不同
					对整个应用项目来说，两个文件没有区别
			开启应用：
				先开启离客户远的，后开启离客户近的
			检查：
				浏览器、netstat -tnulp
		5.2.3 技术关键点
			文件的压缩和解压
				压缩格式：tar zcvf 压缩后的文件名  将要压缩的文件
				解压格式：tar xf 压缩后的文件名
				查看压缩文件:zcat 压缩文件
			示例：
				tar zcvf python.tar.gz python/
				tar xf python1.tar.gz 
				zcat python.tar.gz
				
			文件的传输
				命令格式： scp  要传输的文件		要放置的位置
				示例：
					scp python.tar.gz root@192.168.8.15:/root/
					scp root@192.168.8.15:/root/python.tar.gz ./
			 文件的备份
				时间戳：年月日时分秒：date +%Y%m%d%H%M%S
				备份:
					mv python.tar.gz python.tar.gz-$(date +%Y%m%d%H%M%S)
					
第 6 章 环境部署	
	6.1 基础环境
		6.1.1 基础目录环境	
		6.1.2 主机网络环境	
			主机间免密码认证
				1、本机生成密钥对				线上环境	8.14
					ssh-keygen -t rsa
				2、对端机器使用公钥文件认证		代码仓库	8.15
					1、创建认证文件
						/root/.ssh/authorized_keys
							文件内容，是线上主机 id_rsa.pub文件的内容
					2、ssh认证：
						vim /etc/ssh/sshd_config
							AuthorizedKeysFile      %h/.ssh/authorized_keys
					3、ssh服务重启
						/etc/init.d/ssh  restart
				3、验证							线上环境	8.14
					scp root@192.168.8.15:/root/python.tar.gz ./
	6.2 方案分析
		6.2.1 需求
		6.2.2 需求分析
		6.2.3 部署方案
	6.3 项目环境部署	
		6.3.1 python虚拟环境
			软件安装
				apt-get install python-virtualenv -y
			创建 
				virtualenv -p /usr/bin/python3.5 venv
			进入
				source venv/bin/activate
			退出
				deactivate
			删除
				rm -rf venv	

				
		6.3.2 django环境	
		6.3.3 nginx环境	
		6.3.4 nginx代理django
第 7 章 手工代码发布
	7.1 方案分析
	7.2 方案实施
		代码仓库
			获取代码：
				cd /data/codes
				sed -i 's#1.0#1.1#' django/views.py
			打包代码：
				cd /data/codes
				tar zcf django.tar.gz django
				
		线上主机：
			传输代码：
				cd /data/codes/
				scp root@192.168.8.15:/data/codes/django.tar.gz ./
			停止应用：
				/data/server/nginx/sbin/nginx -s stop
				kill $(lsof -Pti :8000)
			解压代码：
				cd /data/codes/
				tar xf django.tar.gz
			放置代码：
				mv /data/server/itcast/test1/views.py /data/backup/views.py-$(date +%Y%m%d%H%M%S)
				cd /data/codes/
				mv /data/codes/django/views.py /data/server/itcast/test1/
			开启应用：
				source /data/virtual/venv/bin/activate
				cd /data/server/itcast/
				python manage.py runserver >>/dev/null 2>&1 &
				deactivate
				/data/server/nginx/sbin/nginx
			检查：
				netstat -tnulp | grep nginx

		
		
第 8 章 脚本发布代码
	8.1 简单脚本编写	
		8.1.1 命令罗列	
			#!/bin/bash
			# 功能：打包代码
			# 脚本名：tar_code.sh
			# 作者：itcast
			# 版本：V 0.1
			# 联系方式：www.itcast.cn

			cd /data/codes
			[ -f django.tar.gz ] && rm -f django.tar.gz
			tar zcf django.tar.gz django
			关键点：
				命令的可执行
		
		8.1.2 固定内容变量化
			#!/bin/bash
			# 功能：打包代码
			# 脚本名：tar_code.sh
			# 作者：itcast
			# 版本：V 0.2
			# 联系方式：www.itcast.cn

			# 本地变量
			CODE_DIR='/data/codes'
			FILE='django.tar.gz'
			PRO_DIR='django'

			cd "${CODE_DIR}"
			[ -f "${FILE}" ] && rm -f "${FILE}"
			tar zcf "${FILE}" "${PRO_DIR}"	
			
			关键点：
				固定的内容，使用变量实现
				
		8.1.3 功能函数化
			#!/bin/bash
			# 功能：打包代码
			# 脚本名：tar_code.sh
			# 作者：itcast
			# 版本：V 0.3
			# 联系方式：www.itcast.cn

			# 本地变量
			CODE_DIR='/data/codes'
			FILE='django.tar.gz'
			PRO_DIR='django'

			code_tar(){
			  cd "${CODE_DIR}"
			  [ -f "${FILE}" ] && rm -f "${FILE}"
			  tar zcf "${FILE}" "${PRO_DIR}"
			}

			code_tar	
		关键点：	
			命令组合实现的功能使用函数去完成
			作用：方便调用
			
		8.1.4 远程执行
			格式：
				ssh 远程主机登录用户名@远程主机ip地址 "执行命令"
			示例：
				ssh root@192.168.8.15 "ifconfig"
				ssh root@192.168.8.15 "sed -i 's#1.4#1.5#' /data/code/django/views.py"
				ssh root@192.168.8.15 "sed -i 's#1.4#1.5#' /data/codes/django/views.py"
				ssh root@192.168.8.15 "cat /data/codes/django/views.py"
				ssh root@192.168.8.15 "/bin/bash /data/scripts/tar_code.sh"
				ssh root@192.168.8.15 "zcat /data/codes/django.tar.gz"			
	8.2 大型脚本编写	
		8.2.1 脚本框架
			关键点：
				从整体上把握方向
		8.2.2 命令填充
			关键点：
				1、命令执行
				2、各个击破
		8.2.3 增加日志功能	
			需求：
				1、数据说话
				2、历史记录
			关键点：
				函数的使用
				命令变量
				
		8.2.4 增加锁文件功能
			需求：
				安全
			关键点：
				文件添加和删除
				添加和删除的函数位置
				简单流程控制
		8.2.5 脚本流程知识点填充
			关键点：
				脚本传参和函数调用
				case语句与if语句使用
				
		8.2.6 输入参数安全优化	
			关键点：
				脚本传参数量的确定
				main函数流程控制
				
	8.3脚本调试功能	
		-n		检查脚本中的语法错误
		-v		先显示脚本所有内容，然后执行脚本，结果输出，如果执行遇到错误，将错误输出。
		-x		将执行的每一条命令和执行结果都打印出来
	8.4 生产脚本编写总结	
		8.4.1 简单脚本编写总结	
		8.4.2 复杂脚本编写总结	
		8.4.3 注意事项：